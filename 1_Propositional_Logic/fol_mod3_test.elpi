%%% ===========================================================================
%%% Mod 3 interpretation.
%%% ===========================================================================

accumulate "fol".

%%% ---------------------------------------------------------------------------
%%% Model, language, interpretation.
%%% ---------------------------------------------------------------------------

type mod int -> int -> int.

domain [0,1,2].

type zero, one, two term.
type add, mul term -> term -> term.
type eq term -> term -> formula.

namespace mod3_interp
{
    pred eq/3 i:int, i:int, o:bool.
    eq/3 M N B :-
        P is (M - N) mod 3,
        if (P = 0) (B = tt) (B = ff).

    pred termval/3 i:term, o:int.
    termval/3 zero 0.
    termval/3 one  1.
    termval/3 two  2.
    termval/3 (add X Y) N :- N is {termval X} + {termval Y}.
    termval/3 (mul X Y) N :- N is {termval X} * {termval Y}.

    pred atomval/3 i:formula, o:bool.
    atomval/3 (eq X Y) B :- !, termval X M, termval Y N, eq/3 M N B.
}

pred holds/3 i:formula, o:bool.
holds/3 P B :-
    [ (pi X \ pi A \ termval X A :- mod3_interp.termval/3 X A, !)
    , (pi P \ pi B \ eval P B    :- mod3_interp.atomval/3 P B, !)
    ] => holds P B.

%%% ---------------------------------------------------------------------------
%%% Tests.
%%% ---------------------------------------------------------------------------

main :-
    run_tests
    [ report "Mod 3"
    , ok_eq tt (holds/3 (eq (add two one) zero))
    , ok_eq ff (holds/3 (eq (add two two) zero))
    , ok_eq tt (holds/3 (eq (mul two two)  one))
    , ok_eq ff (holds/3 (eq (mul two two) zero))
    , ok_eq tt (holds/3 (all X \ eq (add X zero)   X ))
    , ok_eq tt (holds/3 (ex  X \ eq (add X  one)  two))
    , ok_eq tt (holds/3 (all X \ eq (mul X zero) zero))
    , ok_eq ff (holds/3 (ex  X \ eq (mul X zero)  one))
    ].
