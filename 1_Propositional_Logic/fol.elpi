%%% ===========================================================================
%%% First-order logic.
%%% ===========================================================================

accumulate "prop".

% Terms.
kind term type.

pred copy_term i:term, o:term.

% Quantifiers.
type all, ex (term -> formula) -> formula.

% Closed formulas.
kind formula/c type.
type formula/c formula -> formula/c.
type ctx (term -> formula/c) -> formula/c.

% Mapping on formulas.
copy_formula (all P) (all P1) :- !,
    pi x\ copy_term x x => copy_formula (P x) (P1 x).
copy_formula (ex P) (ex P1) :- !,
    pi x\ copy_term x x => copy_formula (P x) (P1 x).

%%% ---------------------------------------------------------------------------
%%% Interpretation of term and formulas.
%%% ---------------------------------------------------------------------------

pred domain o:list A.

pred termval i:term, o:A.

pred holds i:formula, o:bool.
:if "DBG:HOLDS"
holds P B :- print "Enter:" (holds P B), fail.
holds P B :-
    domain D,
    [ (pi Q \ pi B \ eval (all Q) B :- !, forallb D (augment Q) B)
    , (pi Q \ pi B \ eval (ex  Q) B :- !, existsb D (augment Q) B)
    ] => eval P B.

pred augment i:(term -> formula), i:A, o:bool.
augment P X B :- pi c \ (termval c X :- !) => eval (P c) B.

pred holds/c i:formula/c, o:bool.
holds/c (formula/c P) B :- holds P B.
holds/c (ctx Q) B :- domain D, forallb D (augment/c Q) B.

pred augment/c i:(term -> formula/c), i:A, o:bool.
augment/c P X B :- pi c \ (termval c X :- !) => holds/c (P c) B.

%%% ---------------------------------------------------------------------------
%%% Eliminate vacuous quantification.
%%% ---------------------------------------------------------------------------

pred quantify i:((term -> formula) -> formula), i:(term -> formula), o:formula.
quantify Quant P P1 :-
    pi c \ sigma Pc \ Pc = P c,
    if (pi c1 \ Pc = P c1)
       (copy_term c c => copy_formula Pc P1)
       (copy_term c c => copy_formula Pc (Q c), P1 = Quant Q).

pred simplify i:formula, o:formula.
simplify P P1 :-
    [ (pi P \ pi P1 \ copy_formula (all P) P1 :- !, quantify all P P1)
    , (pi P \ pi P1 \ copy_formula (ex  P) P1 :- !, quantify ex  P P1)
    ] => copy_formula P P1.

%%% ---------------------------------------------------------------------------
%%% Negational normal form.
%%% ---------------------------------------------------------------------------

pred negate i:formula, o:formula.
negate (neg   P) P1 :- copy_formula P P1.
negate (P &&  Q) (P1 !! Q1) :- copy_formula (neg P) P1, copy_formula (neg Q) Q1.
negate (P !!  Q) (P1 && Q1) :- copy_formula (neg P) P1, copy_formula (neg Q) Q1.
negate (P ==> Q) (P1 && Q1) :- copy_formula P P1, copy_formula (neg Q) Q1.
negate (P <=> Q) (P1 && Q1 !! P2 && Q2) :-
    copy_formula P P1, copy_formula (neg Q) Q1, copy_formula (neg P) P2, copy_formula Q Q2.
negate (all P) P1 :- copy_formula (ex  X \ neg (P X)) P1.
negate (ex  P) P1 :- copy_formula (all X \ neg (P X)) P1.

pred split_imp i:formula, o:formula.
split_imp (P ==> Q) (P1 !! Q1) :-
    copy_formula (neg P) P1, copy_formula Q Q1.
split_imp (P <=> Q) (P1 && Q1 !! P2 && Q2) :-
    copy_formula P P1, copy_formula Q Q1, copy_formula (neg P) P2, copy_formula (neg Q) Q2.

pred nnf i:formula, o:formula.
nnf P P1 :-
    [ (pi P \ pi P1 \ copy_formula (all P) P1 :- quantify all P P1, !)
    , (pi P \ pi P1 \ copy_formula (ex  P) P1 :- quantify ex  P P1, !)
    , (pi P \ pi P1 \ copy_formula (neg P) P1 :- negate       P P1, !)
    , (pi P \ pi P1 \ copy_formula      P  P1 :- split_imp    P P1, !)
    ] => copy_formula P P1.
