accumulate "prop".

type p, q, r formula.

atomic P :- std.mem! [p,q,r] P.

main :-
      print "Test eval"
    , [ (eval p tt :- !)
      , (eval q ff :- !)
      ] => ok_eq (eval (p && q)) ff
    , [ (eval p tt :- !)
      , (eval q tt :- !)
      ] => ok_eq (eval (p && q)) tt
    , print "Test atoms"
    , ok_eq (atoms (p && q !! p)) [q, p]
    , print "Test truth table"
    , truthtable (p && q !! (p ==> r))
    , truthtable (neg p !! q)
    , print "Test tautology"
    , ok (tautology (neg p !! p))
    , ok (tautology (falsity ==> p))
    , ko (tautology (neg p !! q))
    , print "Test satisfiable"
    , ok (satisfiable (neg p !! p))
    , ok (satisfiable (neg p !! q))
    , ko (satisfiable (neg p && p))
    , print "Test unsatisfiable"
    , ok (unsatisfiable (neg p && p))
    , ko (unsatisfiable (neg p !! q))
    , ko (unsatisfiable (neg p && q))
    , ko (unsatisfiable (neg p !! p))
    .

