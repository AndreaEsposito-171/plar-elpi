%%% ===========================================================================
%%% Skolemization.
%%% ===========================================================================

accumulate lib.
accumulate formula.
accumulate prop.
accumulate fol.
accumulate skolem.
accumulate verbosity.
accumulate test.

%%% ---------------------------------------------------------------------------
%%% Auxiliary constructions for testing.
%%% ---------------------------------------------------------------------------

type p term -> formula.
type r term -> term -> formula.
type a, b term.
type f term -> term -> term.

%%% ---------------------------------------------------------------------------
%%% Run tests.
%%% ---------------------------------------------------------------------------

shorten test.{ run-tests, ok, ko, okb, kob, ok-eq, section }.
shorten verbosity.{ quiet, terse, info, verbose, debug, with-verbosity }.

main :-
  with-verbosity quiet (run-tests
  [ section "Skolemization"
  , (ok-eq (var/sk  X \ formula/sk (p X))         (skolem.aux (all X \ p X) [a,b]))
  , (ok-eq (func/sk F \ formula/sk (p (F [a,b]))) (skolem.aux (ex  X \ p X) [a,b]))
  , (ok-eq (func/sk X \ var/sk  Y \ formula/sk (r (X []) Y))  (skolem (ex  X \ all Y \ r X Y)))
  , (ok-eq (var/sk  X \ func/sk Y \ formula/sk (r X (Y [X]))) (skolem (all X \ ex  Y \ r X Y)))
  , (ok-eq (var/sk  X \ func/sk Y \ var/sk  Z \ formula/sk (r X (f (Y[X])   Z))) (skolem (all X \ ex  Y \ all Z \ r X (f Y Z))))
  , (ok-eq (var/sk  X \ var/sk  Y \ func/sk Z \ formula/sk (r X (f Y (Z[Y,X])))) (skolem (all X \ all Y \ ex  Z \ r X (f Y Z))))
  , (ok-eq (var/sk  X \ func/sk Y \ var/sk  Z \ formula/sk (r X (f X Z))) (skolem (all X \ ex Y \ all Z \ r X (f X Z))))
  ]).
