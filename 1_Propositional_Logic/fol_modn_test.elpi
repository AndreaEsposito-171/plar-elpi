%%% ===========================================================================
%%% Modular arithmetic interpretation.
%%% ===========================================================================

accumulate "fol".

%%% ---------------------------------------------------------------------------
%%% Miscellanea.
%%% ---------------------------------------------------------------------------

type mod int -> int -> int.

pred numseg o:list int, i:int, i:int.
numseg _L M N :- M i> N, !, fail.
numseg L M N :- numseg.rec L M N.

pred numseg.rec o:list int, i:int, i:int.
numseg.rec [M|L] M N :- M i=< N, !, M1 is M + 1, numseg.rec L M1 N.
numseg.rec [] _M _N.

%%% ---------------------------------------------------------------------------
%%% Model, language, interpretation.
%%% ---------------------------------------------------------------------------

pred domain/mod i:int, o:list int.
domain/mod N D :- N1 is N - 1, numseg D 0 N1.

type zero, one, two term.
type add, mul term -> term -> term.
type eq term -> term -> formula.

namespace mod_interp
{
    pred eq/mod i:int, i:int, i:int, o:bool.
    eq/mod N X Y B :-
        N i> 0,
        P is (X - Y) mod N,
        if (P = 0) (B = tt) (B = ff).

    pred termval/mod i:term, o:int.
    termval/mod zero 0.
    termval/mod one  1.
    termval/mod two  2.
    termval/mod (add X Y) N :- N is {termval X} + {termval Y}.
    termval/mod (mul X Y) N :- N is {termval X} * {termval Y}.

    pred atomval/mod i:int, i:formula, o:bool.
    atomval/mod K (eq X Y) B :- eq/mod K {termval X} {termval Y} B.
}

pred holds/mod i:int, i:formula, o:bool.
holds/mod K P B :-
    [ (pi D \ domain D :- domain/mod K D)
    , (pi X \ pi A \ termval X A :- mod_interp.termval/mod X A)
    , (pi P \ pi B \ eval P B    :- mod_interp.atomval/mod K P B, !)
    ] => holds P B.

%%% ---------------------------------------------------------------------------
%%% Tests.
%%% ---------------------------------------------------------------------------

pred commutative i:(term -> term -> term), o:formula.
commutative Op (all X \ all Y \ eq (Op X Y) (Op Y X)).

pred associative i:(term -> term -> term), o:formula.
associative Op (all X \ all Y \ all Z \ eq (Op X (Op Y Z)) (Op (Op X Y) Z)).

pred hasid i:(term -> term -> term), o:formula.
hasid Op (ex E \ all X \ eq (Op X E) X && eq (Op E X) X).

pred hasinv o:formula.
hasinv (all X \ neg (eq X zero) ==> ex Y \ eq (mul X Y) one).

pred monoidal i:(term -> term -> term), o:formula.
monoidal Op (Assoc && Comm && Id) :-
    associative Op Assoc,
    commutative Op Comm,
    hasid Op Id.

pred ldirstrib i:(term -> term -> term), i:(term -> term -> term), o:formula.
ldirstrib Add Mul
    (all X \ all Y \ all Z \
        eq (Mul X (Add Y Z)) (Add (Mul X Y) (Mul X Z))).

pred rdirstrib i:(term -> term -> term), i:(term -> term -> term), o:formula.
rdirstrib Add Mul
    (all X \ all Y \ all Z \
        eq (Mul (Add Y Z) X) (Add (Mul Y X) (Mul Z X))).

pred dirstrib i:(term -> term -> term), i:(term -> term -> term), o:formula.
distrib Add Mul (LDistr && RDistr) :-
    ldirstrib Add Mul LDistr,
    rdirstrib Add Mul RDistr.

pred isring o:formula.
isring (AddMon && MulMon && Distr) :-
    monoidal add AddMon,
    monoidal mul MulMon,
    distrib add mul Distr.

main :-
    run_tests
    [ report "numseg"
    , ok_eq [0,1,2] (L \ numseg L 0 2)
    , ok (numseg [] 1 1)
    , ko (pi L \ numseg L 1 0)
    , report "Modulo 3"
    , ok_eq tt (holds/mod 3 (eq (add two one) zero))
    , ok_eq ff (holds/mod 3 (eq (add two two) zero))
    , ok_eq tt (holds/mod 3 (eq (mul two two)  one))
    , ok_eq ff (holds/mod 3 (eq (mul two two) zero))
    , ok_eq tt (holds/mod 3 (all X \ eq (add X zero)   X ))
    , ok_eq tt (holds/mod 3 (ex  X \ eq (add X  one)  two))
    , ok_eq tt (holds/mod 3 (all X \ eq (mul X zero) zero))
    , ok_eq ff (holds/mod 3 (ex  X \ eq (mul X zero)  one))
    , ok_eq tt (holds/mod 3 (all X \ all Y \ eq (add X Y) (add Y X)))
    , ok_eq tt (holds/mod 3 (all X \ all Y \ eq (mul X Y) (mul Y X)))
    , report "Modulo 5"
    , ok_eq tt (holds/mod 5 (eq (add (add two one) two) zero))
    , ok_eq ff (holds/mod 5 (eq (add two two) zero))
    , ok_eq tt (holds/mod 5 (all X \ eq (add X zero)   X ))
    , ok_eq tt (holds/mod 5 (ex  X \ eq (add X  one)  two))
    , ok_eq tt (holds/mod 5 (all X \ eq (mul X zero) zero))
    , ok_eq ff (holds/mod 5 (ex  X \ eq (mul X zero)  one))
    , ok_eq tt (holds/mod 5 (all X \ all Y \ eq (add X Y) (add Y X)))
    , ok_eq tt (holds/mod 5 (all X \ all Y \ eq (mul X Y) (mul Y X)))
    , report "commutative add"
    , ok_eq tt (holds/mod 2 {commutative add})
    , ok_eq tt (holds/mod 3 {commutative add})
    , ok_eq tt (holds/mod 4 {commutative add})
    , ok_eq tt (holds/mod 5 {commutative add})
    , ok_eq tt (holds/mod 6 {commutative add})
    , ok_eq tt (holds/mod 7 {commutative add})
    , report "commutative mul"
    , ok_eq tt (holds/mod 2 {commutative mul})
    , ok_eq tt (holds/mod 3 {commutative mul})
    , ok_eq tt (holds/mod 4 {commutative mul})
    , ok_eq tt (holds/mod 5 {commutative mul})
    , ok_eq tt (holds/mod 6 {commutative mul})
    , ok_eq tt (holds/mod 7 {commutative mul})
    , report "zero"
    , ok_eq tt (holds/mod 2 {hasid add})
    , ok_eq tt (holds/mod 3 {hasid add})
    , ok_eq tt (holds/mod 4 {hasid add})
    , ok_eq tt (holds/mod 5 {hasid add})
    , ok_eq tt (holds/mod 6 {hasid add})
    , ok_eq tt (holds/mod 7 {hasid add})
    , report "one"
    , ok_eq tt (holds/mod 2 {hasid mul})
    , ok_eq tt (holds/mod 3 {hasid mul})
    , ok_eq tt (holds/mod 4 {hasid mul})
    , ok_eq tt (holds/mod 5 {hasid mul})
    , ok_eq tt (holds/mod 6 {hasid mul})
    , ok_eq tt (holds/mod 7 {hasid mul})
    , report "associative add"
    , ok_eq tt (holds/mod 2 {associative add})
    , ok_eq tt (holds/mod 3 {associative add})
    , ok_eq tt (holds/mod 4 {associative add})
    , ok_eq tt (holds/mod 5 {associative add})
    , ok_eq tt (holds/mod 6 {associative add})
    , ok_eq tt (holds/mod 7 {associative add})
    , report "associative mul"
    , ok_eq tt (holds/mod 2 {associative mul})
    , ok_eq tt (holds/mod 3 {associative mul})
    , ok_eq tt (holds/mod 4 {associative mul})
    , ok_eq tt (holds/mod 5 {associative mul})
    , ok_eq tt (holds/mod 6 {associative mul})
    , ok_eq tt (holds/mod 7 {associative mul})
    , report "inverse"
    , ok_eq tt (holds/mod 2 {hasinv})
    , ok_eq tt (holds/mod 3 {hasinv})
    , ok_eq ff (holds/mod 4 {hasinv})
    , ok_eq tt (holds/mod 5 {hasinv})
    , ok_eq ff (holds/mod 6 {hasinv})
    , ok_eq tt (holds/mod 7 {hasinv})
    , report "isring"
    , ok_eq tt (holds/mod 2 {isring})
    , ok_eq tt (holds/mod 3 {isring})
    , ok_eq tt (holds/mod 4 {isring})
    , ok_eq tt (holds/mod 5 {isring})
    , ok_eq tt (holds/mod 6 {isring})
    , ok_eq tt (holds/mod 7 {isring})
    ].
