%%% ===========================================================================
%%% Chapter 2: Propositional logic
%%%
%%% Needs: lib.
%%% ===========================================================================

%%% ---------------------------------------------------------------------------
%%% Datatype for formulas.
%%% ---------------------------------------------------------------------------

kind formula type.
type falsity, truth formula.
type neg formula -> formula.
type &&, !!, ==>, <=> formula -> formula -> formula.

infixl !!  4.
infixl &&  5.
infixr ==> 6.
infixr <=> 6.

%%% ---------------------------------------------------------------------------
%%% Standard copy predicate.
%%% ---------------------------------------------------------------------------

pred copy/fm i:formula, o:formula.
copy/fm     truth       truth :- !.
copy/fm   falsity     falsity :- !.
copy/fm   (neg P)    (neg P1) :- !, copy/fm P P1.
copy/fm (P &&  Q) (P1 &&  Q1) :- !, copy/fm P P1, copy/fm Q Q1.
copy/fm (P !!  Q) (P1 !!  Q1) :- !, copy/fm P P1, copy/fm Q Q1.
copy/fm (P <=> Q) (P1 <=> Q1) :- !, copy/fm P P1, copy/fm Q Q1.
copy/fm (P ==> Q) (P1 ==> Q1) :- !, copy/fm P P1, copy/fm Q Q1.

%%% ---------------------------------------------------------------------------
%%% Depth-first copy predicate.
%%% Add clauses to the copy1/fm predicate to customize.
%%% ---------------------------------------------------------------------------

pred dcopy/fm i:formula, o:formula.
dcopy/fm     truth R :- copy1/fm truth R.
dcopy/fm   falsity R :- copy1/fm falsity R.
dcopy/fm   (neg P) R :- dcopy/fm P P1, copy1/fm (neg P1) R.
dcopy/fm (P &&  Q) R :- dcopy/fm P P1, dcopy/fm Q Q1, copy1/fm (P1 &&  Q1) R.
dcopy/fm (P !!  Q) R :- dcopy/fm P P1, dcopy/fm Q Q1, copy1/fm (P1 !!  Q1) R.
dcopy/fm (P <=> Q) R :- dcopy/fm P P1, dcopy/fm Q Q1, copy1/fm (P1 <=> Q1) R.
dcopy/fm (P ==> Q) R :- dcopy/fm P P1, dcopy/fm Q Q1, copy1/fm (P1 ==> Q1) R.

pred copy1/fm i:formula, o:formula.
copy1/fm X X.

%%% ---------------------------------------------------------------------------
%%% Accumulating on all subformulas of a formula.
%%% ---------------------------------------------------------------------------

pred fold i:formula, i:A, o:A.
fold     truth A A  :- !.
fold   falsity A A  :- !.
fold   (neg P) A A1 :- !, fold P A A1.
fold (P &&  Q) A A1 :- !, fold Q A B, fold P B A1.
fold (P !!  Q) A A1 :- !, fold Q A B, fold P B A1.
fold (P ==> Q) A A1 :- !, fold Q A B, fold P B A1.
fold (P <=> Q) A A1 :- !, fold Q A B, fold P B A1.

%%% ---------------------------------------------------------------------------
%%% Atomic formulas.
%%% This predicate is introduced here with no clauses.
%%% Clauses for this predicate will be added locally when needed.
%%% ---------------------------------------------------------------------------

pred atomic i:formula.

%%% ---------------------------------------------------------------------------
%%% Mapping on atoms.
%%% ---------------------------------------------------------------------------

pred onatoms i:(formula -> formula -> o), i:formula, o:formula.
onatoms F P Q :-
    (pi A B \ copy/fm A B :- atomic A, !, F A B)
    => copy/fm P Q.

%%% ---------------------------------------------------------------------------
%%% Collecting atoms.
%%% ---------------------------------------------------------------------------

pred atoms i:formula, o:list formula.
atoms P L :-
    (pi A L L1 \ fold A L L1 :- atomic A, !, insert A L L1)
    => fold P [] L.

%%% ---------------------------------------------------------------------------
%%% Simplification.
%%% ---------------------------------------------------------------------------

% See psimplify1 in [Harrison].
pred simplify1 i:formula, o:formula.
simplify1 (neg truth) falsity.
simplify1 (neg falsity) truth.
simplify1 (neg (neg P)) P :- !.
simplify1 (neg P) (neg P) :- !.
simplify1 (_P && falsity) falsity :- !. 
simplify1 (falsity && _P) falsity :- !. 
simplify1 (P && truth) P :- !.
simplify1 (truth && P) P :- !.
simplify1 (P !! falsity) P :- !.
simplify1 (falsity !! P) P :- !.
simplify1 (_P !! truth) truth :- !.
simplify1 (truth !! _P) truth :- !.
simplify1 (falsity ==> _P) truth :- !.
simplify1 (_P ==> truth) truth :- !.
simplify1 (truth ==> P) P :- !.
simplify1 (P ==> falsity) (neg P) :- !.
simplify1 (P <=> truth) P :- !.
simplify1 (truth <=> P) P :- !.
simplify1 (P <=> falsity) P1 :- simplify1 (neg P) P1, !.
simplify1 (falsity <=> P) P1 :- simplify1 (neg P) P1, !.

pred simplify i:formula, o:formula.
simplify P P1 :- (pi X X1 \ copy1/fm X X1 :- simplify1 X X1) => dcopy/fm P P1.

%%% ---------------------------------------------------------------------------
%%% De Morgan
%%% ---------------------------------------------------------------------------

pred demorgancon1 i:formula, o: formula.
demorgancon1 (P && Q) (neg (neg P !! neg Q)).

pred demorgancon i: formula, o: formula.
demorgancon P P2 :- (pi X X1 \ copy1/fm X X1 :- demorgancon1 X X1) => dcopy/fm P P1, simplify P1 P2.

pred demorgandis1 i:formula, o: formula.
demorgandis1 (P !! Q) (neg (P1 && Q1)) :- copy/fm (neg P) P1, copy/fm (neg Q) Q1.

pred demorgandis i:formula, o:formula.
demorgandis P P2 :- (pi X X1 \ copy1/fm X X1 :- demorgandis1 X X1) => dcopy/fm P P1, simplify P1 P2.

%%% ---------------------------------------------------------------------------
%%% Duality
%%% ---------------------------------------------------------------------------

pred dual1 i: formula, o: formula.
dual1 falsity truth :- !.
dual1 truth falsity :- !.
dual1 (P && Q) (P !! Q) :- !.
dual1 (P !! Q) (P && Q) :- !.
dual1 P P :- atomic P.

pred dual i: formula, o: formula.
dual P P1 :- (pi X X1 \ copy1/fm X X1 :- (dual1 X X1, ! ; X = X1)) => dcopy/fm P P1.

pred dual2 i: formula, o: formula.
dual2 P P1 :- (pi X X1 \ copy/fm X X1 :- dual1 X X1, !) => copy/fm P P1.