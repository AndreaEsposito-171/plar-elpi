%%% ===========================================================================
%%% Miscellanea.
%%% ===========================================================================

%%% ---------------------------------------------------------------------------
%%% Boolean operators.
%%% ---------------------------------------------------------------------------

pred negb o:bool, o:bool.
negb tt ff.
negb ff tt.

pred andb o:bool, o:bool, o:bool.
andb tt tt tt.
andb ff _B ff.
andb _B ff ff.

pred orb o:bool, o:bool, o:bool.
orb ff ff ff.
orb tt _B tt.
orb _B tt tt.

pred impb o:bool, o:bool, o:bool.
impb _B tt tt.
impb ff _B tt.
impb tt ff ff.

pred iffb o:bool, o:bool, o:bool.
iffb tt tt tt.
iffb ff ff tt.
iffb ff tt ff.
iffb tt ff ff.

pred reflect i:prop, o:bool.
reflect P tt :- P, !.
reflect _ ff.

%%% ---------------------------------------------------------------------------
%%% Lists.
%%% ---------------------------------------------------------------------------

pred std.exists! i:list A, i:(A -> prop).
std.exists! [X|_] P :- P X, !.
std.exists! [_|L] P :- std.exists! L P.

:index(_ 1)
pred memeq i:A, i:list A.
memeq A [A|_] :- !.
memeq A [_|L] :- memeq A L.

:index(_ 1)
pred insert i:A, i:list A, o:list A.
insert A L L :- memeq A L, !.
insert A L [A|L].

pred union i:list A, i:list A, o:list A.
union [] L L.
union [A|L1] L2 L3 :- union L1 {insert A L2} L3.

%%% ---------------------------------------------------------------------------
%%% Rudimentary testing framework.
%%% ---------------------------------------------------------------------------

kind test type.
type ok, ko prop -> test.
type ok_eq A -> (A -> prop) -> test.
type report string -> test.

pred run_tests i:(list test).
run_tests [] :- print "run_tests: Done!".
run_tests [T|Ts] :- run_test T, run_tests Ts.

pred run_test i:test.
run_test (ok P) :- test_ok P.
run_test (ko P) :- test_ko P.
run_test (ok_eq R P) :- test_ok_eq R P.
run_test (report S) :- print S.

pred test_ok i:prop.
test_ok P :- print "Test ok:" P, P, !, print "Exit ok:" P.
test_ok P :- print "  !!! TEST OK FAILED:\n " P "\n  !!!".

pred test_ko i:prop.
test_ko P :- print "Test ko:" P, P, !, print "  !!! TEST KO FAILED:\n " P.
test_ko P :- print "Exit ko:" P.

pred equal i:A, i:A.
equal A A.

pred test_ok_eq i:A, i:(A -> prop).
test_ok_eq R P :- print "Test ok eq:" (P R),
                  sigma X\ P X, !,
                  if (equal R X)
                     (print "Exit ok eq:" (P R))
                     (print "  !!! TEST OK EQ FAILED\n  !!! Expected:"
                            (P R) "\n  !!! Obtained:" (P X)).
test_ok_eq R P :- print "  !!! TEST OK EQ FAILED:\n  !!! Expected:"
                        (P R) "\n  !!! FAILED".
