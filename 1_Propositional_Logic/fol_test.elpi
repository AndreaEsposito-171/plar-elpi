%%% ===========================================================================
%%% Simple test for FOL.
%%% ===========================================================================

accumulate "fol".

%%% ---------------------------------------------------------------------------
%%% Model.
%%% ---------------------------------------------------------------------------

kind dom type.
type a, b dom.

pred domain o:list dom.
domain [a, b].

pred eval_f i:dom, o:dom.
eval_f a b.
eval_f b a.

pred eval_r i:dom, o:bool.
eval_r a tt.
eval_r b ff.

pred eval_t i:dom, o:bool.
eval_t _X ff.

type x, y term.
type f term -> term.
type r, t term -> formula.

%%% ---------------------------------------------------------------------------
%%% Interpretation.
%%% ---------------------------------------------------------------------------

% Iteration.
copy_term x x.
copy_term y y.
copy_term (f X) (f X1) :- copy_term X X1.

copy_formula (r X) (r X1) :- copy_term X X1.
copy_formula (t X) (t X1) :- copy_term X X1.

% Terms.
termval x a.
termval y b.
termval (f X) A :- eval_f {termval X} A.

% Atomic formulas.
eval (r X) B :- eval_r {termval X} B.
eval (t X) B :- eval_t {termval X} B.

%%% ---------------------------------------------------------------------------
%%% Tests.
%%% ---------------------------------------------------------------------------

main :-
    run_tests
    [ report "holds"
    , ok_eq tt (holds (r x))
    , ok_eq ff (holds (r y))
    , ok_eq ff (holds (t x))
    , ok_eq tt (holds (t x !! r x))
    , ok_eq ff (holds (t x && r x))
    , ok_eq tt (holds (r y !! r x))
    , ok_eq ff (holds (r y && r x))
    , ok_eq ff (holds (all a\ r (f a)))
    , ok_eq tt (holds (ex  a\ r (f a)))
    , ok_eq tt (holds/c (ctx a\ formula/c (r a !! r x)))
    , ok_eq ff (holds/c (ctx a\ formula/c (r a && r x)))
    , report "simplify"
    , ok_eq (all X \ r X) (simplify (all X \ ex U \ r X))
    , ok_eq (all X \ r X && t y) (simplify (all X \ ex U \ r X && ex Y \ t y))
    , ok_eq (neg (r x) !! neg (r y)) (nnf (neg (r x && r y)))
    , ok_eq ((ex X \ neg (r X)) !! r y)
            (nnf (neg ((all X \ r X) && ex X \ neg (r y))))
    ].
