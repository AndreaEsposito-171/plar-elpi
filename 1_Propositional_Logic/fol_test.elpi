%%% ===========================================================================
%%% Simple test for FOL.
%%% ===========================================================================

accumulate "fol".

%%% ---------------------------------------------------------------------------
%%% Model.
%%% ---------------------------------------------------------------------------

kind domain type.
type a, b domain.

pred domain_elements o:list domain.
domain_elements [a, b].

pred eval_f i:domain, o:domain.
eval_f a b.
eval_f b a.

pred eval_r i:domain, o:bool.
eval_r a tt.
eval_r b ff.

pred eval_t i:domain, o:bool.
eval_t _X ff.

type x, y term.
type f term -> term.
type r, t term -> formula.

%%% ---------------------------------------------------------------------------
%%% Interpretation.
%%% ---------------------------------------------------------------------------

% Terms.
pred termval i:term, o:domain.
termval x a.
termval y b.
termval (f X) A :- eval_f {termval X} A.

% Atomic formulas.
eval (r X) B :- eval_r {termval X} B.
eval (t X) B :- eval_t {termval X} B.

%%% ---------------------------------------------------------------------------
%%% Tests.
%%% ---------------------------------------------------------------------------

main :- domain_elements D,
    run_tests
    [ ok_eq tt (holds (r x) D)
    , ok_eq ff (holds (r y) D)
    , ok_eq ff (holds (t x) D)
    , ok_eq tt (holds (t x !! r x) D)
    , ok_eq ff (holds (t x && r x) D)
    , ok_eq tt (holds (r y !! r x) D)
    , ok_eq ff (holds (r y && r x) D)
    , ok_eq ff (holds (all a\ r (f a)) D)
    , ok_eq tt (holds (ex  a\ r (f a)) D)
    , ok_eq tt (holds/c (ctx a\ formula/c (r a !! r x)) D)
    , ok_eq ff (holds/c (ctx a\ formula/c(r a && r x)) D)
    ].
