%%% =========================================================================== 
%%% Chapter 1. Introduction
%%% 
%%%    Section 1.6: Symbolic expressions in OCaml
%%% 
%%%    ToDo:
%%%      - Parser and support for concrete syntax?
%%%      - Use of arithmetic operators +, * : is it possible?    
%%%      - Priority of "add", "mul" ?
%%%      - More tests?
%%%      - Is varb needed?  Use lProlog variables?                                                       
%%% ===========================================================================

%% ----------------------------------------------------------------------------
%% Datatype for expressions.
%% ----------------------------------------------------------------------------

kind expression type.
type const int -> expression.
type add expression -> expression -> expression.
type mul expression -> expression -> expression.

infixl add 6.
infixl mul 7.

pred simplify1 i:expression, o:expression.

simplify1 (const M add const N) (const P) :- P is M + N, !.
simplify1 (const M mul const N) (const P) :- P is M * N, !.
simplify1 (const 0 add X) X :- !.
simplify1 (X add const 0) X :- !.
simplify1 (const 0 mul _) (const 0) :- !.
simplify1 (_ mul const 0) (const 0) :- !.
simplify1 (const 1 mul X) X :- !.
simplify1 (X mul const 1) X :- !.
simplify1 X X.

pred simplify i:expression, o:expression.
simplify (E1 add E2) E :- !, simplify1 ({simplify E1} add {simplify E2}) E.
simplify (E1 mul E2) E :- !, simplify1 ({simplify E1} mul {simplify E2}) E.
simplify E E.

main :-
    std.spy(simplify (const 0 add const 1) _E1),
    std.spy(pi X\ simplify
              ((const 0 mul X add const 1) mul const 3 add const 12)
              E2),
    !,
    print E2.
