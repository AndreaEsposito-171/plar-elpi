%%% =========================================================================== 
%%% Chapter 1. Introduction
%%% 
%%%    Section 1.6: Symbolic expressions in OCaml
%%% 
%%%    ToDo:
%%%      - Parser and support for concrete syntax?
%%%      - More tests?
%%%      - Is varb needed?  Use lProlog variables?                                                       
%%% ===========================================================================

%% ----------------------------------------------------------------------------
%% Datatype for expressions.
%% ----------------------------------------------------------------------------

kind expression type.
type const int -> expression.
type + expression -> expression -> expression.
type * expression -> expression -> expression.

pred simplify1 i:expression, o:expression.

simplify1 (const M + const N) (const P) :- P is M + N, !.
simplify1 (const M * const N) (const P) :- P is M * N, !.
simplify1 (const 0 + X) X :- !.
simplify1 (X + const 0) X :- !.
simplify1 (const 0 * _) (const 0) :- !.
simplify1 (_ * const 0) (const 0) :- !.
simplify1 (const 1 * X) X :- !.
simplify1 (X * const 1) X :- !.
simplify1 X X.

pred simplify i:expression, o:expression.
simplify (E1 + E2) E :- !, simplify1 ({simplify E1} + {simplify E2}) E.
simplify (E1 * E2) E :- !, simplify1 ({simplify E1} * {simplify E2}) E.
simplify E E.

%%% ---------------------------------------------------------------------------
%%% Mapping.
%%% ---------------------------------------------------------------------------

pred copy i:expression, o:expression.
copy (const N) (const N).
copy (X + Y) (X1 + Y1) :- copy X X1, copy Y Y1.
copy (X * Y) (X1 * Y1) :- copy X X1, copy Y Y1.

pred copy1 i:expression, o:expression.
copy1 X X.
% copy1 (const N) (const N).
% copy1 (X + Y) (X + Y).
% copy1 (X * Y) (X * Y).

pred deepcopy i:expression, o:expression.
deepcopy (const N) (const N).
deepcopy (X + Y) Z :- copy1 ({deepcopy X} + {deepcopy Y}) Z.
deepcopy (X * Y) Z :- copy1 ({deepcopy X} * {deepcopy Y}) Z.

%%% ---------------------------------------------------------------------------
%%% Compositional simplification.
%%% ---------------------------------------------------------------------------

pred copy_comp i:expression, o:expression.
copy_comp (const M + const N) (const P) :- P is M + N, !.
copy_comp (const M * const N) (const P) :- P is M * N, !.

pred copy_add_zero i:expression, o:expression.
copy_add_zero (const 0 + X) X :- !.
copy_add_zero (X + const 0) X :- !.

pred copy_mul_one i:expression, o:expression.
copy_mul_one (const 1 * X) X :- !.
copy_mul_one (X * const 1) X :- !.

pred copy_mul_zero i:expression, o:expression.
copy_mul_zero (const 0 * _X) (const 0) :- !.
copy_mul_zero (_X * const 0) (const 0) :- !.

pred simpl0 i:expression, o:expression.
simpl0 X X1 :-
    (pi X X1 \ copy X X1 :- copy_mul_zero X X1, !)
    => copy X X1.

pred deepsimpl0 i:expression, o:expression.
deepsimpl0 X X1 :-
    (pi X X1 \ copy1 X X1 :- copy_mul_zero X X1, !)
    => deepcopy X X1.

pred compute i:expression, o:expression.
compute X X1 :-
    (pi X X1 \ copy1 X X1 :- copy_comp X X1, !)
    => deepcopy X X1.

pred topcompute i:expression, o:expression.
topcompute X X1 :-
    (pi X X1 \ copy X X1 :- copy_comp X X1, !)
    => copy X X1.

%%% ---------------------------------------------------------------------------
%%% Run tests.
%%% ---------------------------------------------------------------------------

main :-
    std.spy(simplify (const 0 + const 1) _E1), !,
    std.spy(pi X\ simplify
              ((const 0 * X + const 1) * const 3 + const 12)
              E2),
    !, print E2,
    MINUSONE is 0 - 1,
    std.spy(simpl0 ((const 1 * (const 0 * const 0))
                    +
                    (const 2 * (const MINUSONE + const 1)))
                  E3),
    !, print E3,
    std.spy(deepsimpl0 ((const 1 * (const 0 * const 0))
                        +
                        (const 2 * (const MINUSONE + const 1)))
                  E4),
    !, print E4,
    std.spy(compute ((const 1 * (const 0 * const 0))
                        +
                        (const 2 * (const MINUSONE + const 1)))
                  E5),
    !, print E5,
    std.spy(topcompute ((const 1 * (const 0 * const 0))
                        +
                        (const 2 * (const MINUSONE + const 1)))
                  E6),
    !, print E6.
